-- копия скриптов базы данных с консоли с пояснениями

create table if not exists Person(
    person_id int generated by default as identity primary key,
    full_name varchar(100) not null unique,
    year_of_birth int check (year_of_birth > 1920)
);

create table if not exists Book(
    book_id int generated by default as identity primary key,
    person_id int references Person(person_id) on delete set null,
    title varchar (100),
    author varchar(100),
    year int not null
);

insert into Person(full_name, year_of_birth) values
('Иванов Иван Иванович', 1970),
('Петров Петр Петрович', 1960),
('Алексеев Алексей Алексеевич', 1989),
('Познер Владимир Владимирович', 1944),
('Федоров Мирон Янович', 1985);

insert into Book(title, author, year) values
('Над пропастью во ржи', 'Девид Селинжер', 1951),
('День опричника', 'Владимир Сорокин', 2006),
('Тайные виды на гору Фудзи', 'Владимир Пелевин', 2018),
('Философия Java', 'Брюс Эккель', 2018),
('Психология обыденной жизни', 'Зигмунд Фрейд', 1904),
('Игра в бисер', 'Герман Гессе', 1943),
('Бытие и время', 'Мартин Хайдеггер', 1927);

drop table Person;
drop table Book;

/*
Из ТЗ:
В БД должно быть две таблицы - Person и Book. Для всех таблиц
настройте автоматическую генерацию id.

People Человек (поля: ФИО (UNIQUE), год рождения)
Book Книга (поля: название, автор, год)

Отношение между сущностями: Один ко Многим.
У человека может быть множество книг. Книга может принадлежать
только одному человеку.
*/
/*
Пояснения к таблице Person

create table if not exists
удобная конструкция для автоматических систем,
добавляют таблицу только в том случае, если её нет

person_id int generated by default as identity primary key
автоматическая генерация самой базой данных
id в версиях Postgresql после 10.
старая версия:
person_id serial,
Если я хорошо помню, ещё есть вариант через JDBC,
когда доставалось предыдущее значение id и к нему добавлялась 1.

name varchar(100) not null unique,
уникальность значений в базе данных мы сможем проверить через
утилитный валидатор PersonValidator
import org.springframework.validation.Errors;
import org.springframework.validation.Validator;
Обычную проверку в представлении мы делаем через
hibernate-validator
*/

/*
 Пояснения к таблице Book
person_id int references Person(person_id) on delete set null,
 соотношение один-ко-многим предполагает связывание
 (как правило по id). person_id - внешний ключ

 on delete set null - при удалении пользователя, владевшего
 книгой она становится ничейной, то есть в этом поле у неё null
 (действие при каскаде)

 person_id в даннной таблице не заполнен (= null)
 Можно произвольно заполнить эту колонку
 Эта колонка показывает, кому принадлежит сейчас эта книга
 */