Добавим валидацию в проект
(Валидация - это проверка данных)

Валидация будет состоять из 2-х разделов:
Валидация на уровне представления
и Валидация на уровне базы данных

---

Валидация на уровне представления.
Используется, когда человек заполняет форму на сайте,
и его сразу можно проверить, не запрашивая базу данных

Проверяем, чтобы присутствовала зависимость
<artifactId>hibernate-validator</artifactId>
Её необходимость полностью не подтверждена

Далее мы можем начать валидацию моделей Person и Book,
т.е. добавлять ограничения на поля этих моделей

Далее в контроллерах, там где это нужно, мы ставим
аннотацию @Valid - перед объектами. Когда
значения из формы внедряются в наши объекты,
происходит их проверка на ограничения в модели, и,
если есть ошибка, то она помещается в специальный
объект, BindingResult который мы ставим после объявления
нашего объекта.

Далее в слое представления редактируются (в обоих объектах)
edit.html, new.html c выводом сообщений из проверки моделей

---

Валидация на уровне базы данных.
По условиям ТЗ
(см. 05 DB script.txt)
у нас должно быть уникальное ФИО Person:
full_name varchar(100) not null unique,

Когда мы создаем нового человека
и не обрабатываем правильно эту ситуацию,
пользователь получает очень некрасивое сообщение от
БД в браузер типа:
"
HTTP Status 500 – Internal Server Error
Message Request processing failed;
nested exception is org.springframework.dao.DuplicateKeyException:
PreparedStatementCallback; SQL [insert into Person(full_name, year_of_birth) values (?, ?)];
ОШИБКА: повторяющееся значение ключа нарушает ограничение уникальности "person_name_key"
"
Чтобы пользователю получать понятное объяснение
нужно сделать следующее:

В папке util создаем специальный валидатор
PersonValidator.java
имплементирующий класс Validator

в PersonDAO добавляем также дополнительный метод проверки
getPersonByFullName()
(есть ли такой же пользователь - с таким же именем в БД)

Далее, когда у нас реализован DAO и класс-валидатор,
мы можем использовать его в контроллере PeopleController
в методе create()

Тестируем ситуацию, создаем нового одинакового Person
http://localhost:8080/people/new
и смотрим теперь результат:
validation_full_name.png
