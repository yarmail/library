Попробуем кратенько пробежаться по другим
(следующим) этапам, пояснения и каменты будут в них

Создаем модели в папке models
(пока без валидации) Хотелось бы сначала создать и
настроить все слои, добиться их работоспособности,
а потом усложнять.

---

Работаем с конфигурацией, т.е. с папкой config

---

Тестирование
Проверяем связку контроллер-представление-сервер
В контроллеры добавляем тестовый контроллер
TestController.java
В Представления (папку views) добавляем
соотвествующую страницу test.html
и запускаем сервер. При вызове
http://localhost:8080/test
должно показать тестовую страницу
с русским языком

---

Отправка на github

После первоначальной настройки проекта
думаю на этом этапе можно сделать первый комит
на гитхаб

Для этого идем в меню
VCS (Version Control Systems) -> Share Project on Github

Добавляем имя проекту
Проверяем, какие файлы будут добавлены в коммит,
Добавляем сообщение коммита
(можно оставить Initial commit) и все.
После этого название меню VCS заменяется на Git

---

Следующие шаги - наращиваем функционал программы
например, задача - нужно показать всех людей:
- добавляем метод index в dao
- добавляем метод index в контроллер PeopleController
- добавляем представление views/people/index.html
Для тестиирования каждой такой задачи,
после окончания работ над всеми слоями можно запускать
проект и сервер и проверять запрос для контроллера,
в данном случае
http://localhost:8080/people
Также после тестирования логично было бы делать
коммит для закрепления результата на github

---

Операция Показать все книги какого-то пользователя
состоит из 2-х операций (методов) в DAO -
show(), getBooksByPersonId(), соответственно
также 2 переменны передаются в представление
views/people/show.html

---

Для создания нового Person и занесения его
в базу нам нужно:
- сделать страницу с формой  people/new
- сделать GET метод в контроллере,
отправляющий туда пустую модель - newPerson()
- Сделать POST контроллер, принимающий
заполненную модель из формы - create()
и в DAO использовать метод save()











